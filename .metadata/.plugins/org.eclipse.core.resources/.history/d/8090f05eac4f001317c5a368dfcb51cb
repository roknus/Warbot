package edu.turtlekit2.warbot.roknus;

import java.util.ArrayList;
import java.util.List;

import edu.turtlekit2.warbot.WarBrain;
import edu.turtlekit2.warbot.message.WarMessage;

public class BrainBase extends WarBrain{
	
    ArrayList<dataExplorerRocket> explorer;
    ArrayList<dataExplorerRocket> rocket;
    private int distanceBaseEnemy;
	private double angleBaseEnemy;

	public BrainBase()
	{
		this.angleBaseEnemy = 0;
	}

	@Override
	public String action() {
		
		if(!emptyBag()){
			return "eat";
		}
		

		List<WarMessage> liste = getMessage();
		
		for(WarMessage m : liste){
			//reply(m, "ici", null);
			//System.out.println("Angle du WarExplorer :"+m.getContent()[0]+"\nDistance du WarExplorer à l'ennemi :"+m.getContent()[1]+"\nAngle de la WarBase "+m.getAngle()+"\nDistance du WarExplorer à la WarBase :"+m.getDistance());
//			setHeading(m.getAngle() + m.getContent()[]);
			if(m.getMessage().equals("EnemyBase"))
			{
				this.setAngleBaseEnemy(m.getAngle() + Double.parseDouble(m.getContent()[0]));
				System.out.println(this.getHeading());
				this.setHeading(this.getAngleBaseEnemy());
				System.out.println(this.getHeading());
				System.out.println(m.getContent()[0]);
				System.out.println(this.getAngleBaseEnemy());
				
			}	
			if(m.getMessage().equals("MyPosition"))
			{
				for(dataExplorerRocket d : rocket)
				{
					if(m.getSender() == d.getId())
					{
						d.setAngle(m.getAngle());
					}
				}
				for(dataExplorerRocket d : explorer)
				{
					if(m.getSender() == d.getId())
					{
						d.setAngle(m.getAngle());
					}
				}
			}
				
		}
		
        for(dataExplorerRocket r : rocket)
        {
                String content[] = new String[1];
                content[0] = computeAngle(r);
                sendMessage(r.getId(),"",content);
        }
		
		broadcastMessage("WarExplorer", "WarBasePosition", null);
		
		if(getEnergy() > 12000){
			setNextAgentCreate("Explorer");
			return "create";
		}
		
		return "action";
	}
	
    public String computeAngle(dataExplorerRocket r) {
        double distanceREnemyPow = Math.pow(r.getDistance(),2) + Math.pow(distanceBaseEnemy,2) - ( 2 * r.getDistance() * distanceBaseEnemy * Math.cos(Math.toRadians(r.getAngle())) );
        double distanceREnemy = Math.sqrt(distanceREnemyPow);
        return Double.toString(distanceREnemy);
    }

	public double getAngleBaseEnemy() {
		return angleBaseEnemy;
	}

	public void setAngleBaseEnemy(double baseEnemy) {
		this.angleBaseEnemy = baseEnemy;
	}	
	public int getDistanceBaseEnemy() {
		return distanceBaseEnemy;
	}

	public void setDistanceBaseEnemy(int distanceBaseEnemy) {
		this.distanceBaseEnemy = distanceBaseEnemy;
	}
}
